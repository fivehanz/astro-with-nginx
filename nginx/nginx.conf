# Set the user for Nginx
# Specifies the user that Nginx will run as
user nginx;

# Specifies the number of worker processes to run
# The value "auto" sets the number of worker processes based on the number of CPU cores available
# max_clients = worker_processes * worker_connections
worker_processes auto;

# Maximum open file descriptors per process;
# should be > worker_connections.
worker_rlimit_nofile 8192;

# Defines the event block
# Specifies the parameters for handling connections and events
events {
    # Specifies the maximum number of connections that each worker process can handle simultaneously
    worker_connections 8000;
    multi_accept on;
    use epoll;
}

# Defines the http block
# Configures the HTTP server
http {
    # Hide nginx version information.
    server_tokens off;

    # Includes the MIME types file
    include /etc/nginx/mime.types;
    
    # Sets the default MIME type
    default_type application/octet-stream;

    # Set the log format
    # Defines the format of the log entries in the access log
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    # Specifies the location of the access log file
    access_log /var/log/nginx/access.log main;

    # Enables or disables the use of sendfile()
    sendfile on;

    # Tell Nginx not to send out partial frames; this increases throughput
    # since TCP frames are filled up before being sent out. (adds TCP_CORK)
    tcp_nopush      on;

    # Tell Nginx to enable the Nagle buffering algorithm for TCP packets, which
    # collates several smaller packets together into one larger packet, thus saving
    # bandwidth at the cost of a nearly imperceptible increase to latency. (removes TCP_NODELAY)
    tcp_nodelay     off;

    # Determines the timeout for keep-alive connections
    keepalive_timeout 65;

    # Enables or disables gzip compression
    gzip on;

    # Compression level (1-9).
    # 5 is a perfect compromise between size and cpu usage, offering about
    # 75% reduction for most ascii files (almost identical to level 9).
    gzip_comp_level    5;

    # Don't compress anything that's already small and unlikely to shrink much
    # if at all (the default is 20 bytes, which is bad as that usually leads to
    # larger files after gzipping).
    gzip_min_length    256;

    # Compress data even for clients that are connecting to us via proxies,
    # identified by the "Via" header (required for CloudFront).
    gzip_proxied       any;

    # Tell proxies to cache both the gzipped and regular version of a resource
    # whenever the client's Accept-Encoding capabilities header varies;
    # Avoids the issue where a non-gzip capable client (which is extremely rare
    # today) would display gibberish if their proxy gave them the gzipped version.
    gzip_vary          on;

    # Compress all output labeled with one of the following MIME-types.
    gzip_types
        application/atom+xml
        application/javascript
        application/json
        application/rss+xml
        application/vnd.ms-fontobject
        application/x-font-ttf
        application/x-web-app-manifest+json
        application/xhtml+xml
        application/xml
        font/opentype
        image/svg+xml
        image/x-icon
        text/css
        text/plain
        text/x-component;
    # text/html is always compressed by HttpGzipModule

    # Includes configuration files with server blocks
    include /etc/nginx/conf.d/*.conf;
}